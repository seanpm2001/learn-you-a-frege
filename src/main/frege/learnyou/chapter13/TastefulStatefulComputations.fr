module learnyou.chapter13.TastefulStatefulComputations where

import frege.control.monad.State
import frege.system.Random

type Stack = [Int]

pop' :: Stack -> (Int, Stack)
pop' []       = error "pop from the empty stack"
pop' (x : xs) = (x, xs)

push' :: Int -> Stack -> ((), Stack)
push' a xs = ((), a : xs)

stackManip' :: Stack -> (Int, Stack)
stackManip' stack =
    let ((), newStack1) = push' 3 stack
        (a,  newStack2) = pop' newStack1
    in  pop' newStack2

pop :: State Stack Int
pop = do
    xs <- State.get
    case xs of
        []     -> error "pop from the empty stack"
        x : xs -> do
            State.put xs
            return x

push :: Int -> State Stack ()
push a = do
    xs <- State.get
    State.put (a : xs)

stackManip :: State Stack Int
stackManip = do
    push 3
    pop
    pop

stackStuff :: State Stack ()
stackStuff = do
    a <- pop
    if a == 5
        then push 5
        else do
            push 3
            push 8

moreStack :: State Stack ()
moreStack = do
    a <- stackManip
    if a == 100
        then stackStuff
        else return ()

stackyStack :: State Stack ()
stackyStack = do
    stackNow <- State.get
    if stackNow == [ 1, 2, 3 ]
        then State.put [ 8, 3, 1 ]
        else State.put [ 9, 2, 1 ]

randomSt :: (RandomGen g, Random a) => State g a
randomSt = do
    gen <- State.get
    let (x, newGen) = random gen
    State.put newGen
    return x

threeCoins :: State StdGen (Bool, Bool, Bool)
threeCoins = do
    a <- randomSt
    b <- randomSt
    c <- randomSt
    return (a, b, c)

main _ = do

    println $ stackManip' [ 5, 8, 2, 1 ]

    println $ stackManip.run [ 5, 8, 2, 1 ]

    println $ stackStuff.run [ 9, 0, 2, 1, 0 ]

    println $ fst $ threeCoins.run (mkStdGen 33)
