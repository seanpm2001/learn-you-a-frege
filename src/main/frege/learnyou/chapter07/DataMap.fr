module learnyou.chapter07.DataMap where

import frege.data.Char ( isUpper )
import frege.data.HashMap as HM ()

phoneBook1 =
    [ ("betty", "555-2938")
    , ("bonnie", "452-2928")
    , ("patsy", "493-2928")
    , ("lucille", "205-2928")
    , ("wendy", "939-8282")
    , ("penny", "853-2492")
    ]

findKey :: (Eq k) => k -> [(k,v)] -> Maybe v
--findKey key []         = Nothing
--findKey key ((k,v):xs) = if key == k then Just v else findKey key xs
findKey key = foldr (\(k, v) \acc -> if key == k then Just v else acc) Nothing

fromList' :: (Ord k) => [(k, v)] -> HM.HashMap k v
fromList' = foldr (\(k, v) \acc -> HM.insert k v acc) empty

phoneBook2 =
    [ ("betty", "555-2938")
    , ("betty", "342-2492")
    , ("bonnie", "452-2928")
    , ("patsy", "493-2928")
    , ("patsy", "943-2929")
    , ("patsy", "827-9162")
    , ("lucille", "205-2928")
    , ("wendy", "939-8282")
    , ("penny", "853-2492")
    , ("penny", "555-2111")
    ]

phoneBookToMap :: (Ord k) => [(k, String)] -> HM.HashMap k String
phoneBookToMap xs =
    HM.fromListWith (\number1 \number2 -> number1 ++ ", " ++ number2) xs

phoneBookToMap' :: (Ord k) => [(k, a)] -> HM.HashMap k [a]
phoneBookToMap' xs =
    HM.fromListWith (++) $ map (\(k, v) -> (k, [v])) xs

main _ = do

    println $ findKey "penny" phoneBook1
    println $ findKey "betty" phoneBook1
    println $ findKey "wilma" phoneBook1

    println $ HM.fromList $
        [ ("betty", "555-2938"), ("bonnie", "452-2928"), ("lucille", "205-2928") ]
    println $ HM.fromList [ (1, 2), (3, 4), (3, 2), (5, 5) ]

    println $ (empty :: HM.HashMap Int Int)

    println $ HM.insert 5 600 (HM.insert 4 200 (HM.insert 3 100 empty))
    println $ HM.insert 5 600 . HM.insert 4 200 . HM.insert 3 100 $ empty

    println $ null (empty :: HM.HashMap Int Int)
    println $ null $ HM.fromList [ (2, 3), (5, 5) ]

    println $ HM.size empty
    println $ HM.size $ HM.fromList [ (2, 4), (3, 3), (4, 2), (5, 4), (6, 4) ]

    println $ HM.singleton 3 9
    println $ HM.insert 5 9 $ HM.singleton 3 9

    println $ HM.member 3 $ HM.fromList [ (3, 6), (4, 3), (6, 9) ]
    println $ HM.member 3 $ HM.fromList [ (2, 5), (4, 5) ]

    println $ HM.mapValues (* 100) $ HM.fromList [ (1, 1), (2, 4), (3, 9) ]
    println $ HM.filterValues isUpper $
        HM.fromList [ (1, 'a'), (2, 'A'), (3, 'b'), (4, 'B') ]

    println $ HM.each . HM.insert 9 2 $ HM.singleton 4 3

    println $ HM.lookup "patsy" $ phoneBookToMap phoneBook2
    println $ HM.lookup "wendy" $ phoneBookToMap phoneBook2
    println $ HM.lookup "betty" $ phoneBookToMap phoneBook2

    println $ HM.lookup "patsy" $ phoneBookToMap' phoneBook2

    println $ HM.fromListWith max $
        [ (2, 3), (2, 5), (2, 100), (3, 29), (3, 22), (3, 11), (4, 22), (4, 15) ]
    println $ HM.fromListWith (+) $
        [ (2, 3), (2, 5), (2, 100), (3, 29), (3, 22), (3, 11), (4, 22), (4, 15) ]

    println $ HM.insertWith (+) 3 100 $ HM.fromList [ (3, 4), (5, 103), (6, 339) ]
