module learnyou.chapter12.WalkTheLine where

type Birds = Int
type Pole = (Birds, Birds)

landLeft' :: Birds -> Pole -> Pole
landLeft' n (left, right) = (left + n, right)

landRight' :: Birds -> Pole -> Pole
landRight' n (left, right) = (left, right + n)

infixl 5 `-:`
(-:) :: a -> (a -> b) -> b
x -: f = f x

landLeft :: Birds -> Pole -> Maybe Pole
landLeft n (left, right)
    | abs ((left + n) - right) < 4 = Just (left + n, right)
    | otherwise                    = Nothing

landRight :: Birds -> Pole -> Maybe Pole
landRight n (left, right)
    | abs (left - (right + n)) < 4 = Just (left, right + n)
    | otherwise                    = Nothing

banana :: Pole -> Maybe Pole
banana _ = Nothing

routine :: Maybe Pole
routine =
    case landLeft 1 (0, 0) of
        Nothing    -> Nothing
        Just pole1 ->
            case landRight 4 pole1 of
                Nothing    -> Nothing
                Just pole2 ->
                    case landLeft 2 pole2 of
                        Nothing    -> Nothing
                        Just pole3 -> landLeft 1 pole3

main _ = do

    println $ landLeft' 2 (0, 0)
    println $ landRight' 1 (1, 2)
    println $ landRight' (-1) (1, 2)

    println $ landLeft' 2 (landRight' 1 (landLeft' 1 (0, 0)))

    println $ 100 -: (* 3)
    println $ true -: not
    println $ (0, 0) -: landLeft' 2

    println $ (0, 0) -: landLeft' 1 -: landRight' 1 -: landLeft' 2

    println $ landLeft' 10 (0, 3)
    println $ (0,0) -: landLeft' 1 -: landRight' 4 -: landLeft' (-1) -: landRight' (-2)

    println $ landLeft 2 (0, 0)
    println $ landLeft 10 (0, 3)

    println $ landRight 1 (0, 0) >>= landLeft 2
    println $ Nothing >>= landLeft 2
    println $ return (0, 0) >>= landRight 2 >>= landLeft 2 >>= landRight 2

    println $ return (0, 0) >>= landLeft 1 >>= landRight 4 >>= landLeft (-1) >>= landRight (-2)

    println $ return (0, 0) >>= landLeft 1 >>= banana >>= landRight 1

    println $ Nothing >> Just 3
    println $ Just 3 >> Just 4
    println $ Just 3 >> (Nothing :: Maybe Int)

    println $ return (0, 0) >>= landLeft 1 >> Nothing >>= landRight 1
