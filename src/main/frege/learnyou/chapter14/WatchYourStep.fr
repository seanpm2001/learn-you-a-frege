module learnyou.chapter14.WatchYourStep where

import learnyou.chapter14.TakingAWalk ( Tree )
import learnyou.chapter14.ATrailOfBreadcrumbs ( Zipper, Crumb )

goLeft :: Zipper a -> Maybe (Zipper a)
goLeft (Node x l r, bs) = Just (l, LeftCrumb x r : bs)
goLeft (Empty, _)       = Nothing

goRight :: Zipper a -> Maybe (Zipper a)
goRight (Node x l r, bs) = Just (r, RightCrumb x l : bs)
goRight (Empty, _)       = Nothing

goUp :: Zipper a -> Maybe (Zipper a)
goUp (t, LeftCrumb x r : bs)  = Just (Node x t r, bs)
goUp (t, RightCrumb x l : bs) = Just (Node x l t, bs)
goUp (_, [])                  = Nothing

main _ = do

    println $ (goLeft (Empty, []) :: Maybe (Zipper Char))
    println $ goLeft (Node 'A' Empty Empty, [])

    let coolTree = Node 1 Empty (Node 3 Empty Empty)
    println $ return (coolTree, []) >>= goRight
    println $ return (coolTree, []) >>= goRight >>= goRight
    println $ return (coolTree, []) >>= goRight >>= goRight >>= goRight
