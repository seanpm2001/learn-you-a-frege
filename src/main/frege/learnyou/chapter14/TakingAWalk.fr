module learnyou.chapter14.TakingAWalk where

data Tree a = Empty | Node a (Tree a) (Tree a)
derive Show (Tree a)

freeTree :: Tree Char
freeTree =
    Node 'P'
        (Node 'O'
            (Node 'L'
                (Node 'N' Empty Empty)
                (Node 'T' Empty Empty)
            )
            (Node 'Y'
                (Node 'S' Empty Empty)
                (Node 'A' Empty Empty)
            )
        )
        (Node 'L'
            (Node 'W'
                (Node 'C' Empty Empty)
                (Node 'R' Empty Empty)
            )
            (Node 'A'
                (Node 'A' Empty Empty)
                (Node 'C' Empty Empty)
            )
        )

data Direction = L | R
derive Show Direction

type Directions = [Direction]

changeToP :: Directions -> Tree Char -> Tree Char
changeToP _        Empty        = Empty
changeToP []       (Node _ l r) = Node 'P' l r
changeToP (L : ds) (Node x l r) = Node x (changeToP ds l) r
changeToP (R : ds) (Node x l r) = Node x l (changeToP ds r)

-- 'elemAt' is already defined at ArrayElem.elemAt
nodeAt :: Directions -> Tree a -> a
nodeAt _        Empty        = error "no element."
nodeAt []       (Node x _ _) = x
nodeAt (L : ds) (Node _ l _) = nodeAt ds l
nodeAt (R : ds) (Node _ _ r) = nodeAt ds r

main _ = do
    let newTree = changeToP [R, L] freeTree
    println $ nodeAt [R, L] newTree
