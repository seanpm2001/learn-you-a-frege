module learnyou.chapter06.SomeHigherOrderismIsInOrder where

applyTwice :: (a -> a) -> a -> a
applyTwice f x = f (f x)

multThree :: (Num a) => a -> a -> a -> a
multThree x y z = x * y * z

zipWith' :: (a -> b -> c) -> [a] -> [b] -> [c]
zipWith' _ [] _ = []
zipWith' _ _ [] = []
zipWith' f (x : xs) (y : ys) = f x y : zipWith' f xs ys

flip' :: (a -> b -> c) -> b -> a -> c
flip' f y x = f x y

main _ = do

    println $ applyTwice (+ 3) 10
    println $ applyTwice (++ " HAHA") "HEY"
    println $ applyTwice ("HAHA " ++) "HEY"
    println $ applyTwice (multThree 2 2) 9
    println $ applyTwice (3 :) [1]

    println $ zipWith' (+) [ 4, 2, 5, 6 ] [ 2, 6, 2, 3 ]
    println $ zipWith' max [ 6, 3, 2, 1 ] [ 7, 3, 1, 5 ]
    println $ zipWith' (++) [ "foo ", "bar ", "baz " ]
                            [ "fighters", "hoppers", "aldrin" ]
    println $ zipWith' (*) (replicate 5 2) [1 ..]
    println $ zipWith' (zipWith' (*)) [ [ 1, 2, 3 ], [ 3, 5, 6 ], [ 2, 3, 4 ] ]
                                      [ [ 3, 2, 2 ], [ 3, 4, 5 ], [ 5, 4, 3 ] ]

    println $ flip' zip [ 1, 2, 3, 4, 5 ] "hello".toList
    println $ zipWith (flip' div) (repeat 2) [ 10, 8, 6, 4, 2 ]
