module learnyou.chapter08.TypeParameters where

data Car = Car
    { company :: String
    , model :: String
    , year :: Int
    }
derive Show Car

data Car' a b c = Car'
    { company :: a
    , model :: b
    , year :: c
    }
derive Show (Car' a b c)

tellCar :: Car -> String
tellCar (Car {company = c, model = m, year = y}) =
    "This " ++ c ++ " " ++ m ++ " was made in " ++ show y

tellCar' :: (Show a) => Car' String String a -> String
tellCar' (Car' {company = c, model = m, year = y}) =
    "This " ++ c ++ " " ++ m ++ " was made in " ++ show y

data Vector a = Vector a a a
derive Show (Vector a)

vplus :: (Num t) => Vector t -> Vector t -> Vector t
(Vector i j k) `vplus` (Vector l m n) = Vector (i + l) (j + m) (k + n)

scalarMult :: (Num t) => Vector t -> t -> Vector t
(Vector i j k) `scalarMult` m = Vector (i * m) (j * m) (k * m)

vectMult :: (Num t) => Vector t -> Vector t -> t
(Vector i j k) `vectMult` (Vector l m n) =  i * l + j * m + k * n

main _ = do

    let stang = Car { company = "Ford", model = "Mustang", year = 1967 }
    println $ tellCar stang

    println $ tellCar' (Car' "Ford" "Mustang" 1967)
    println $ tellCar' (Car' "Ford" "Mustang" "nineteen sixty seven")

    println $ Vector 3 5 8 `vplus` Vector 9 2 8
    println $ (Vector 3 5 8 `vplus` Vector 9 2 8) `vplus` Vector 0 2 3
    println $ Vector 3 9 7 `scalarMult` 10
    println $ Vector 4 9 5 `vectMult` Vector 9.0 2.0 4.0
    println $ Vector 2 9 3 `scalarMult` (Vector 4 9 5 `vectMult` Vector 9 2 4)
