module learnyou.chapter11.ApplicativeFunctors where

import frege.data.Traversable ( sequenceA )
import frege.data.wrapper.ZipList ( ZipList )

example1 :: IO ()
example1 = do
    a <- (++) <$> getLine <*> getLine
    putStrLn $ "The two lines concatenated turn out to be: " ++ a

example2 :: IO [String]
example2 = sequenceA [ getLine, getLine, getLine ]

main _ = do

--    println $ Just (+ 3) <*> Just 9 --> compilation warning. use <$>
    println $ pure (+ 3) <*> Just 10
    println $ pure (+ 3) <*> Just 9
--    println $ Just (++ "hahah") <*> Nothing  --> ditto.
    println $ (Nothing :: Maybe (String -> String)) <*> Just "woot"

    println $ pure (+) <*> Just 3 <*> Just 5
    println $ pure (+) <*> Just 3 <*> Nothing
    println $ pure (+) <*> Nothing <*> Just 5

    println $ (++) <$> Just "johntra" <*> Just "volta"

    println $ (pure "Hey" :: [String])
    println $ (pure "Hey" :: Maybe String)

    println $ [ (* 0), (+ 100), (^ 2) ] <*> [ 1, 2, 3 ]
    println $ [ (+), (*) ] <*> [ 1, 2 ] <*> [ 3, 4 ]
    println $ (++) <$> [ "ha", "heh", "hmm" ] <*> [ "?", "!", "." ]

    println $ [ x * y | x <- [ 2, 5, 10 ], y <- [ 8, 10, 11 ] ]
    println $ (*) <$> [ 2, 5, 10 ] <*> [ 8, 10, 11 ]
    println $ filter (> 50) $ (*) <$> [ 2, 5, 10 ] <*> [ 8, 10, 11 ]

    println $ pure 3 "blah"
    println $ (+) <$> (+ 3) <*> (* 100) $ 5
    println $ (\x \y \z -> [ x, y, z ]) <$> (+ 3) <*> (* 2) <*> (/ 2) $ 5

    println $ toList $ (+) <$> ZipList [ 1, 2, 3 ] <*> ZipList [ 100, 100, 100 ]
    println $ toList $ (+) <$> ZipList [ 1, 2, 3 ] <*> ZipList [ 100, 100 .. ]
    println $ toList $ max <$> ZipList [ 1, 2, 3, 4, 5, 3 ] <*> ZipList [ 5, 3, 1, 2 ]
    println $ toList $ (,,) <$> ZipList "dog".toList <*> ZipList "cat".toList <*> ZipList "rat".toList

    println $ liftA2 (:) (Just 3) (Just [4])
    println $ (:) <$> Just 3 <*> Just [4]

    println $ sequenceA [Just 3, Just 2, Just 1]
    println $ sequenceA [Just 3, Nothing, Just 1]
    println $ sequenceA [(+ 3), (+ 2), (+ 1)] 3
    println $ sequenceA [ [ 1, 2, 3 ], [ 4, 5, 6 ] ]
    println $ sequenceA [ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 3, 4, 4 ], [] ]

    println $ sequenceA [ (> 4), (< 10), odd ] 7
    println $ and $ sequenceA [ (> 4), (< 10), odd ] 7

    println $ sequenceA [ [ 1, 2, 3 ], [ 4, 5, 6 ] ]
    println $ [ [ x, y ] | x <- [ 1, 2, 3 ], y <- [ 4, 5, 6 ] ]
    println $ sequenceA [ [ 1, 2 ], [ 3, 4 ] ]
    println $ [ [ x, y ] | x <- [ 1, 2 ], y <- [ 3, 4 ] ]
    println $ sequenceA [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ] ]
    println $ [ [ x, y, z ] | x <- [ 1, 2 ], y <- [ 3, 4 ], z <- [ 5, 6 ] ]
